import logging
from telegram.ext import PicklePersistence
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaDocument
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, \
    CallbackQueryHandler, ConversationHandler
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import re
import asyncio
from telegram.error import TelegramError
import datetime




# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))
ADMIN_IDS = os.getenv("ADMIN_IDS").split(',')

# —Å–æ—Å—Ç–æ—è–Ω–∏—è
USER_INFO, WAIT_FOR_CODE, ACTIVE, HOMEWORK_RESPONSE = range(4)

# –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞
CODE_WORDS = {
    "—Ä–æ–∑–∞": ("main_course", "femininity", "no_check"),
    "—Ñ–∏–∞–ª–∫–∞": ("main_course", "femininity", "with_check"),
    "–ª–µ–ø–µ—Å—Ç–æ–∫": ("main_course", "femininity", "premium"),
    "—Ç—ã–∫–≤–∞": ("auxiliary_course", "autogenic", "no_check"),
    "—Å–ª–∏–≤–∞": ("auxiliary_course", "autogenic", "with_check"),
    "–º–æ–ª–æ–∫–æ": ("auxiliary_course", "autogenic", "premium")
}

persistence = PicklePersistence(filepath="bot_data.pkl")

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
DELAY_PATTERN = re.compile(r"_(\d+)([mh])$")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ —á–∞—Å–∞—Ö)
DEFAULT_LESSON_INTERVAL = 0.3 # –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Ä–æ–∫–æ–≤ 72 —á–∞—Å–∞

DEFAULT_LESSON_DELAY_HOURS = 3 # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏

# if not os.access('bot_db.sqlite', os.W_OK):
#     logger.critical("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
#     sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
try:
    cursor.executescript('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT NOT NULL DEFAULT '–ß–ï–ë–£–†–ê–®–ö–ê',
        main_course TEXT,
        auxiliary_course TEXT,
        main_paid INTEGER DEFAULT 0,
        auxiliary_paid INTEGER DEFAULT 0,
        main_current_lesson INTEGER DEFAULT 1,
        auxiliary_current_lesson INTEGER DEFAULT 1,
        main_homework_status TEXT DEFAULT 'none',
        auxiliary_homework_status TEXT DEFAULT 'none',
        main_last_homework_time DATETIME,
        auxiliary_last_homework_time DATETIME,
        penalty_task TEXT,
        main_last_message_id INTEGER,
        auxiliary_last_message_id INTEGER,
        preliminary_material_index INTEGER DEFAULT 0,
        main_tariff TEXT,
        auxiliary_tariff TEXT
    );

    CREATE TABLE IF NOT EXISTS homeworks (
        hw_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        course_type TEXT,
        lesson INTEGER,
        file_id TEXT,
        message_id INTEGER,
        status TEXT DEFAULT 'pending',
        feedback TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        submission_time DATETIME,
        approval_time DATETIME,
        admin_comment TEXT,  -- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    );

    CREATE TABLE IF NOT EXISTS admins (
        admin_id INTEGER PRIMARY KEY,
        level INTEGER DEFAULT 1
    );
    
    CREATE TABLE IF NOT EXISTS admin_codes (
        code_id INTEGER PRIMARY KEY AUTOINCREMENT,
        admin_id INTEGER,
        code TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        used BOOLEAN DEFAULT FALSE,
        FOREIGN KEY(admin_id) REFERENCES admins(admin_id)
    );

    CREATE TABLE IF NOT EXISTS user_settings (
        user_id INTEGER PRIMARY KEY,
        morning_notification TIME,
        evening_notification TIME,
        show_example_homework BOOLEAN DEFAULT 1,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    );
    ''')
    conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
except sqlite3.Error as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")



with conn:
    for admin_id in ADMIN_IDS:
        try:
            admin_id = int(admin_id)
            cursor.execute('INSERT OR IGNORE INTO admins (admin_id) VALUES (?)', (admin_id,))
            conn.commit()
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")

async def handle_user_info(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    full_name = update.effective_message.text.strip()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"{user_id} - Current state")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
    if not full_name:
        await update.effective_message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return USER_INFO

    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            """
            INSERT INTO users (user_id, full_name) 
            VALUES (?, ?)
            ON CONFLICT(user_id) DO 
            UPDATE SET full_name = excluded.full_name,
                      main_course = NULL,
                      auxiliary_course = NULL
            """,
            (user_id, full_name),
        )
        conn.commit()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,))
        saved_name = cursor.fetchone()[0]

        if saved_name != full_name:
            logger.error(f"–ò–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º {saved_name} != {full_name}")
            print(f"–ò–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º {saved_name} != {full_name}")

        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await update.effective_message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {full_name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞."
        )
        return WAIT_FOR_CODE

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ SQL –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return USER_INFO

async def reminders(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute('SELECT morning_notification, evening_notification FROM user_settings WHERE user_id = ?', (user_id,))
    settings = cursor.fetchone()
    if not settings:
        cursor.execute('INSERT INTO user_settings (user_id) VALUES (?)', (user_id,))
        conn.commit()
        settings = (None, None)

    morning, evening = settings
    text = "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
    text += f"üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {morning or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
    text += f"üåá –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {evening or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n\n"
    text += "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    text += "/set_morning HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    text += "/set_evening HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    text += "/disable_reminders ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

    await update.message.reply_text(text)

async def set_morning(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        time = context.args[0]
        if not re.match(r"^\d{2}:\d{2}$", time):
            raise ValueError
        cursor.execute('UPDATE user_settings SET morning_notification = ? WHERE user_id = ?', (time, user_id))
        conn.commit()
        await update.message.reply_text(f"üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")

async def disable_reminders(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute('UPDATE user_settings SET morning_notification = NULL, evening_notification = NULL WHERE user_id = ?', (user_id,))
    conn.commit()
    await update.message.reply_text("üîï –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

async def send_reminders(context: CallbackContext):
    now = datetime.datetime.now().strftime("%H:%M")
    cursor.execute('SELECT user_id, morning_notification, evening_notification FROM user_settings')
    for user_id, morning, evening in cursor.fetchall():
        if morning and now == morning:
            await context.bot.send_message(chat_id=user_id, text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞.")
        if evening and now == evening:
            await context.bot.send_message(chat_id=user_id, text="üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")

async def stats(update: Update, context: CallbackContext):
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    active_users = cursor.execute('''
        SELECT COUNT(DISTINCT user_id) 
        FROM homeworks 
        WHERE submission_time >= DATETIME('now', '-3 days')
    ''').fetchone()[0]

    # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    recent_homeworks = cursor.execute('''
        SELECT COUNT(*) 
        FROM homeworks 
        WHERE submission_time >= DATETIME('now', '-1 day')
    ''').fetchone()[0]

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = cursor.execute('SELECT COUNT(*) FROM users').fetchone()[0]

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è: {active_users}\n"
    text += f"üìö –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {recent_homeworks}\n"
    text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {total_users}"

    await update.message.reply_text(text)

async def set_evening(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        time = context.args[0]
        if not re.match(r"^\d{2}:\d{2}$", time):
            raise ValueError
        cursor.execute('UPDATE user_settings SET evening_notification = ? WHERE user_id = ?', (time, user_id))
        conn.commit()
        await update.message.reply_text(f"üåá –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time}.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")



async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
    logger.info(f"{user_id} - start")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        """
        SELECT user_id, main_course, auxiliary_course 
        FROM users 
        WHERE user_id = ?
        """,
        (user_id,),
    )
    user_data = cursor.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if not user_data:
        await update.effective_message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return USER_INFO
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _, main_course, auxiliary_course = user_data

        # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        if not main_course and not auxiliary_course:
            await update.effective_message.reply_text(
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞:"
            )
            return WAIT_FOR_CODE
        else:
            # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(update, context)
            return ConversationHandler.END

async def show_main_menu(update: Update, context: CallbackContext):
    logger.info(
        f"{update.effective_user.id} - show_main_menu")

    user = update.effective_user
    message = update.effective_message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_message –≤–º–µ—Å—Ç–æ message

    cursor.execute('SELECT main_course, auxiliary_course, main_current_lesson FROM users WHERE user_id = ?', (user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    main_course, auxiliary_course, main_current_lesson = user_data
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    cursor.execute('SELECT full_name FROM users WHERE user_id = ?', (user.id,))
    full_name = cursor.fetchone()[0]
    greeting_text = f"–ü—Ä–∏–≤–µ—Ç, {full_name.split()[0]}!"  # –ë–µ—Ä—ë–º –∏–º—è –∏–∑ –±–∞–∑—ã

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É—Ä—Å –∏ —Å—Ç–∞—Ç—É—Å –î–ó
    if main_course:
        homework_status = await get_homework_status_text(user.id, 'main_course')
        greeting_text += f"\n–¢—ã –Ω–∞ –∫—É—Ä—Å–µ '{main_course}'  (–¥–æ–º–∞—à–∫–∞ {homework_status})."
        greeting_text += " –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."

    else:
        greeting_text += "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = await create_main_menu_keyboard(user.id, main_course)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply_text(greeting_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def get_homework_status_text(user_id, course_type):
    cursor.execute(f'''
    SELECT hw_id, lesson, status FROM homeworks 
    WHERE user_id = ? AND course_type = ? AND status = 'pending'
    ''', (user_id, course_type))
    pending_hw = cursor.fetchone()

    if pending_hw:
        hw_id, lesson, status = pending_hw
        return f"–¥–æ–º–∞—à–∫—É –ø–æ {lesson} —É—Ä–æ–∫—É"  # –∏–ª–∏ f"–¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –ø–æ {lesson} —É—Ä–æ–∫—É (id {hw_id})", –µ—Å–ª–∏ id —Ç–æ–∂–µ –≤–∞–∂–µ–Ω
    else:
        return " :-) "  # –º–æ–∂–Ω–æ "–Ω–µ –∂–¥—É –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"

def parse_delay_from_filename(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.
    """
    match = DELAY_PATTERN.search(filename)
    if not match:
        return None

    value, unit = match.groups()
    value = int(value)

    if unit == "m":  # –º–∏–Ω—É—Ç—ã
        return value * 60
    elif unit == "h":  # —á–∞—Å—ã
        return value * 3600
    return None

def get_lesson_text(user_id, lesson_number, course_type):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫—É—Ä—Å–∞
    if course_type == 'main_course':
        cursor.execute('SELECT main_course FROM users WHERE user_id = ?', (user_id,))
    else:
        cursor.execute('SELECT auxiliary_course FROM users WHERE user_id = ?', (user_id,))
    course = cursor.fetchone()[0]

    try:
        with open(f'courses/{course}/lesson{lesson_number}.txt', 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: 'courses/{course}/lesson{lesson_number}.txt'")
        return None

async def send_lesson(update: Update, context: CallbackContext, course_type: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫.
    """
    user = update.effective_user
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if course_type == "main_course":
            lesson_field = "main_current_lesson"
            course_field = "main_course"
        elif course_type == "auxiliary_course":
            lesson_field = "auxiliary_current_lesson"
            course_field = "auxiliary_course"
        else:
            await context.bot.send_message(chat_id=user.id, text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫—É—Ä—Å–∞.")
            return

        cursor.execute(f'SELECT {lesson_field}, {course_field} FROM users WHERE user_id = ?', (user.id,))
        lesson_data = cursor.fetchone()
        if not lesson_data:
            await context.bot.send_message(chat_id=user.id, text="–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        current_lesson, course_name = lesson_data
        next_lesson = current_lesson + 1

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        lesson_text = get_lesson_text(user.id, next_lesson, course_type)
        if not lesson_text:
            await context.bot.send_message(chat_id=user.id, text="–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        await context.bot.send_message(chat_id=user.id, text=lesson_text)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞
        lesson_dir = f'courses/{course_name}/'
        files = [
            f for f in os.listdir(lesson_dir)
            if f.startswith(f'lesson{next_lesson}_') and os.path.isfile(os.path.join(lesson_dir, f))
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        for file in files:
            file_path = os.path.join(lesson_dir, file)
            delay_seconds = parse_delay_from_filename(file)
            if not delay_seconds:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                await send_file(context.bot, user.id, file_path, file)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        cursor.execute(f'UPDATE users SET {lesson_field} = ? WHERE user_id = ?', (next_lesson, user.id))
        conn.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
        await context.bot.send_message(
            chat_id=user.id,
            text="–ñ–¥—É –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–æ–º–∞—à–∫–∏ - –∂–¥—ë–º —Å–ª–µ–¥ —É—Ä–æ–∫–∞ –∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é —Å–º–æ—Ç—Ä–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞: {e}")
        await context.bot.send_message(chat_id=user.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_file_with_delay(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    """
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    file_path = job_data["file_path"]
    file_name = job_data["file_name"]

    try:
        await send_file(context.bot, chat_id, file_path, file_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: {e}")

async def send_file(bot, chat_id, file_path, file_name):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        if file_name.lower().endswith(('.jpg', '.jpeg', '.png')):
            with open(file_path, 'rb') as photo:
                await bot.send_photo(chat_id=chat_id, photo=photo)
        elif file_name.lower().endswith('.mp4'):
            with open(file_path, 'rb') as video:
                await bot.send_video(chat_id=chat_id, video=video)
        elif file_name.lower().endswith('.mp3'):
            with open(file_path, 'rb') as audio:
                await bot.send_audio(chat_id=chat_id, audio=audio)
        else:
            with open(file_path, 'rb') as document:
                await bot.send_document(chat_id=chat_id, document=document, filename=file_name)  # –ü–µ—Ä–µ–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        await bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {file_name}.")

async def create_main_menu_keyboard(user_id, course_type):

    keyboard = [
        [InlineKeyboardButton("–ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", callback_data='gallery')],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞/–¢–∞—Ä–∏—Ñ—ã", callback_data='support')]
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_course, auxiliary_course = get_user_courses(user_id)
    active_course_type = 'main_course' if main_course else 'auxiliary_course'

    preliminary_button = await add_preliminary_button(user_id, active_course_type)
    if preliminary_button:
        keyboard.insert(0, [preliminary_button])

    return keyboard

async def get_lesson_after_code(update: Update, context: CallbackContext, course_type: str):
    user = update.effective_user
    # –ü–æ—Å—ã–ª–∞–µ–º —É—Ä–æ–∫
    await send_lesson(update, context, course_type)

async def show_homework(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    lesson_number = query.data.split('_')[1]
    await query.edit_message_text(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–∞–ª–µ—Ä–µ—è –î–ó –ø–æ {lesson_number} —É—Ä–æ–∫—É")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
def get_preliminary_materials(course, next_lesson):
    try:
        lesson_dir = f'courses/{course}/'
        if not os.path.exists(lesson_dir):
            return []

        return [
            f for f in os.listdir(lesson_dir)
            if f.startswith(f'lesson{next_lesson}_p')
               and os.path.isfile(os.path.join(lesson_dir, f))
        ]
    except FileNotFoundError:
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {lesson_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
async def send_preliminary_material(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    course_type = query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫—É—Ä—Å–∞ –∏–∑ callback_data
    course_prefix = course_type.split('_')[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —É—Ä–æ–∫ —Å–ª–µ–¥—É—é—â–∏–π
    cursor.execute(
        f'SELECT {course_prefix}_current_lesson FROM users WHERE user_id = ?',
        (user_id,)
    )
    current_lesson = cursor.fetchone()[0]
    next_lesson = current_lesson + 1

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    cursor.execute(f'SELECT {course_type}_course FROM users WHERE user_id = ?', (user_id,))
    course = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = get_preliminary_materials(course, next_lesson)

    if not materials:
        await query.edit_message_text("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    cursor.execute('SELECT preliminary_material_index FROM users WHERE user_id = ?', (user_id,))
    material_index = cursor.fetchone()[0] or 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞

    if material_index >= len(materials):
        await query.edit_message_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    material_file = materials[material_index]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    material_path = f'courses/{course}/{material_file}'

    if material_file.endswith('.jpg') or material_file.endswith('.png'):
        await context.bot.send_photo(chat_id=user_id, photo=open(material_path, 'rb'))
    elif material_file.endswith('.mp4'):
        await context.bot.send_video(chat_id=user_id, video=open(material_path, 'rb'))
    elif material_file.endswith('.mp3'):
        await context.bot.send_audio(chat_id=user_id, audio=open(material_path, 'rb'))
    else:
        await context.bot.send_document(chat_id=user_id, document=open(material_path, 'rb'))

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    material_index += 1
    cursor.execute('UPDATE users SET preliminary_material_index = ? WHERE user_id = ?', (material_index, user_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    remaining_materials = len(materials) - material_index
    keyboard = [
        [InlineKeyboardButton(f"–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Å–ª–µ–¥ —É—Ä–æ–∫—É ({remaining_materials} –æ—Å—Ç–∞–ª–æ—Å—å)",
                              callback_data=f'preliminary_{course_type}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if remaining_materials > 0:
        await query.edit_message_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë?", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
async def add_preliminary_button(user_id, course_type):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫—É—Ä—Å–∞ (main/auxiliary)
    course_prefix = course_type.split('_')[0]  # –ü–æ–ª—É—á–∞–µ–º "main" –∏–ª–∏ "auxiliary"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
    cursor.execute(
        f'SELECT {course_prefix}_current_lesson FROM users WHERE user_id = ?',
        (user_id,)
    )
    current_lesson = cursor.fetchone()[0]
    next_lesson = current_lesson + 1

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    cursor.execute(
        f'SELECT {course_prefix}_course FROM users WHERE user_id = ?',
        (user_id,)
    )
    course = cursor.fetchone()[0]

    materials = get_preliminary_materials(course, next_lesson)
    if not materials:
        return None

    cursor.execute('SELECT preliminary_material_index FROM users WHERE user_id = ?', (user_id,))
    material_index = cursor.fetchone()[0] or 0

    remaining_materials = len(materials) - material_index
    if remaining_materials > 0:
        return InlineKeyboardButton(
            f"–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Å–ª–µ–¥. —É—Ä–æ–∫—É({remaining_materials} –æ—Å—Ç–∞–ª–æ—Å—å)",
            callback_data=f'preliminary_{course_type}'
        )
    return None

def get_average_homework_time(user_id):

    cursor.execute('''
        SELECT AVG((JULIANDAY(approval_time) - JULIANDAY(submission_time)) * 24 * 60 * 60)
        FROM homeworks
        WHERE user_id = ? AND status = 'approved'
    ''', (user_id,))
    result = cursor.fetchone()[0]
    if result:
        average_time_seconds = int(result)
        hours, remainder = divmod(average_time_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    else:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

async def continue_course(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute(
        'SELECT main_course, auxiliary_course, main_current_lesson, auxiliary_current_lesson FROM users WHERE user_id = ?',
        (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    main_course, auxiliary_course, main_lesson, auxiliary_lesson = user_data

    if main_course:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ
        cursor.execute(
            'SELECT hw_id, lesson FROM homeworks WHERE user_id = ? AND course_type = ? AND status = ? ORDER BY timestamp DESC LIMIT 1',
            (user_id, 'main_course', 'pending'))
        pending_hw = cursor.fetchone()

        if pending_hw:
            hw_id, lesson = pending_hw

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute(
                'SELECT main_course, main_paid, main_current_lesson, main_homework_status FROM users WHERE user_id = ?',
                (user_id,))
            course_data = cursor.fetchone()
            main_course, main_paid, main_current_lesson, main_homework_status = course_data

            bonuses = ""  # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –±–æ–Ω—É—Å–æ–≤

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = f"–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫—É—Ä—Å—É {main_course}, —É—Ä–æ–∫ {lesson}.\n"
            text += f"–í–∞—à–∏ –±–æ–Ω—É—Å—ã: {bonuses}\n"

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            cursor.execute('SELECT submission_time FROM homeworks WHERE hw_id = ?', (hw_id,))
            submission_time = cursor.fetchone()[0]
            if submission_time:
                submission_time = datetime.fromisoformat(submission_time)
                deadline = submission_time + timedelta(hours=72)
                time_left = deadline - datetime.now()
                hours_left = int(time_left.total_seconds() / 3600)
                text += f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours_left} —á–∞—Å–æ–≤\n\n"
            else:
                text += "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"

            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞", callback_data=f"repeat_lesson_{lesson}")],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫–∏ –¥—Ä—É–≥–∏—Ö", callback_data=f"view_other_hw_{lesson}")]
            ]

            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return True  # –ï—Å—Ç—å —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –î–ó, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        average_time = get_average_homework_time(user_id)
        cursor.execute('SELECT main_course, main_paid, main_current_lesson, main_homework_status FROM users WHERE user_id = ?', (user_id,))
        course_data = cursor.fetchone()
        main_course, main_paid, main_current_lesson, main_homework_status = course_data

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.full_name}!\n"
        text += f"–í–∞—à –∫—É—Ä—Å: {main_course}\n"
        text += f"–û–ø–ª–∞—á–µ–Ω: {'–î–∞' if main_paid else '–ù–µ—Ç'}\n"
        text += f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {main_current_lesson}\n"
        text += f"–°—Ç–∞—Ç—É—Å –î–ó: {main_homework_status}\n"
        text += f"–í—ã —Å–¥–∞–µ—Ç–µ –î–ó –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞: {average_time}\n\n"
        text += "–í–í–ï–î–ò–¢–ï –ö–û–î–û–í–û–ï –°–õ–û–í–û –ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
        cursor.execute('SELECT main_course, auxiliary_course FROM users WHERE user_id = ?', (update.effective_user.id,))
        main_course, auxiliary_course = cursor.fetchone()

        is_vip = False
        if main_course == 'femininity':
            cursor.execute('SELECT main_paid FROM users WHERE user_id = ?', (update.effective_user.id,))
            main_paid = cursor.fetchone()[0]
            if main_paid == 3:  # 3 - Premium
                is_vip = True
        elif auxiliary_course == 'autogenic':
            cursor.execute('SELECT auxiliary_paid FROM users WHERE user_id = ?', (update.effective_user.id,))
            auxiliary_paid = cursor.fetchone()[0]
            if auxiliary_paid == 3:  # 3 - Premium
                is_vip = True

        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–≤—ã—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='tariffs'),
             InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó", callback_data='send_hw')],
            [InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", callback_data='gallery')],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
            [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", callback_data='random_joke')]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        preliminary_button = await add_preliminary_button(update.effective_user.id, 'main_course')
        if preliminary_button:
            keyboard.insert(0, [preliminary_button])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ

        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return True
    return False

async def handle_admin_approval(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action = data[1]
    hw_id = data[2]

    if action == 'approve':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É –∞–¥–º–∏–Ω–∞
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ:")
        context.user_data['awaiting_comment'] = hw_id
        context.user_data['approval_status'] = 'approved'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    elif action == 'reject':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É –∞–¥–º–∏–Ω–∞
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ:")
        context.user_data['awaiting_comment'] = hw_id
        context.user_data['approval_status'] = 'rejected'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å

    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


async def save_admin_comment(update: Update, context: CallbackContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –î–ó.
    """
    logger.info(
        f"{update.effective_user.id} - Current state: {await context.application.persistence.get_user(update.effective_user.id)}")

    user_id = update.effective_user.id
    cursor.execute('SELECT admin_id FROM admins WHERE admin_id = ?', (user_id,))
    if not cursor.fetchone():
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    hw_id = context.user_data.get('awaiting_comment')
    approval_status = context.user_data.pop('approval_status', None)

    if not hw_id or not approval_status:
        # –£–±–∏—Ä–∞–µ–º reply_text –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if update.message.chat.type != 'private':
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
        return

    if hw_id and approval_status:
        comment = update.message.text
        try:
            cursor.execute('''
                UPDATE homeworks 
                SET status = ?, feedback = ?, approval_time = DATETIME('now'), admin_comment = ?
                WHERE hw_id = ?
            ''', (approval_status, comment, comment, hw_id))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            conn.commit()
            await update.message.reply_text(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω: {approval_status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ –î–ó: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω hw_id –∏–ª–∏ —Å—Ç–∞—Ç—É—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def handle_admin_rejection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    hw_id = query.data.split('_')[2]
    cursor.execute('UPDATE homeworks SET status = "rejected" WHERE hw_id = ?', (hw_id,))
    conn.commit()
    await query.edit_message_text(f"–î–ó {hw_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

async def show_tariffs(update: Update, context: CallbackContext):
    await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç–∞—Ä–∏—Ñ—ã")

async def request_homework(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
    logger.info(
        f"{update.effective_user.id} - Current state: {await context.application.persistence.get_user(update.effective_user.id)}")

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):")
    return HOMEWORK_RESPONSE  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –î–ó

async def save_homework(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file_id = None

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document and update.message.document.mime_type.startswith('image/'):
        file_id = update.message.document.file_id

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å
        cursor.execute('''
                SELECT main_course, auxiliary_course, main_current_lesson 
                FROM users WHERE user_id = ?
            ''', (user_id,))
        main_course, auxiliary_course, current_lesson = cursor.fetchone()

        course_type = "main_course" if main_course else "auxiliary_course"
        course_name = main_course or auxiliary_course
        lesson = current_lesson - 1  # –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫ —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –î–ó –≤ –ë–î
        cursor.execute('''
                INSERT INTO homeworks 
                (user_id, course_type, lesson, file_id, message_id, status, submission_time) 
                VALUES (?, ?, ?, ?, NULL, 'pending', DATETIME('now'))
            ''', (user_id, course_type, lesson, file_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        hw_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –¥–ª—è —Å–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è
        self_approve_callback_data = f"self_approve|{course_type}|{hw_id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π —Å–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è
        confirmation_message = await update.message.reply_text(
            "‚úÖ –î–æ–º–∞—à–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –•–æ—Ç–∏—Ç–µ —Å–∞–º–æ–æ–¥–æ–±—Ä—è—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üöÄ –°–∞–º–æ–æ–¥–æ–±—Ä—è—é", callback_data=self_approve_callback_data),
                ]
            ])
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['homework_message_id'] = confirmation_message.message_id
        logger.info(f"confirmation_message.message_id: {confirmation_message.message_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º "|"
        approve_callback_data = f"approve|{course_type}|{hw_id}"
        reject_callback_data = f"reject|{course_type}|{hw_id}"

        # –õ–æ–≥–∏—Ä—É–µ–º callback_data –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"approve_callback_data: {approve_callback_data}")
        logger.info(f"reject_callback_data: {reject_callback_data}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(
                    f"Sending homework to admin group (attempt {attempt + 1}): chat_id={ADMIN_GROUP_ID}, file_id={file_id}")
                admin_message = await context.bot.send_photo(
                    chat_id=ADMIN_GROUP_ID,
                    photo=file_id,
                    caption=f"–ù–æ–≤–æ–µ –î–ó!\n"
                            f"User ID: {user_id}\n"
                            f"–ö—É—Ä—Å: {course_name}\n"
                            f"–£—Ä–æ–∫: {lesson}",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=approve_callback_data),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=reject_callback_data)
                        ]
                    ])
                )
                logger.info(f"Successfully sent homework to admin group. Message ID: {admin_message.message_id}")
                break  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –î–ó –∞–¥–º–∏–Ω–∞–º (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó –∞–¥–º–∏–Ω–∞–º.")
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        cursor.execute('''
                        UPDATE homeworks 
                        SET message_id = ? 
                        WHERE hw_id = ?
                    ''', (admin_message.message_id, hw_id))
        conn.commit()

        await update.message.reply_text("‚úÖ –î–æ–º–∞—à–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –î–ó: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

async def self_approve_homework(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'üöÄ –°–∞–º–æ–æ–¥–æ–±—Ä—è—é' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    await query.answer()

    # –õ–æ–≥–∏—Ä—É–µ–º callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    callback_data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback_data}")

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback_data.split('|')
    if len(parts) != 3:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    action = parts[0]  # self_approve
    course_type = parts[1]  # main_course –∏–ª–∏ auxiliary_course
    try:
        hw_id = int(parts[2])  # ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, –ö—É—Ä—Å: {course_type}, ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {hw_id}")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ hw_id –∏–∑ callback_data: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if action == "self_approve":
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –≤ –ë–î
            cursor.execute('''
                UPDATE homeworks 
                SET status = 'self_approved', 
                    approval_time = DATETIME('now') 
                WHERE hw_id = ?
            ''', (hw_id,))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ context.user_data
            homework_message_id = context.user_data.get('homework_message_id')
            if homework_message_id:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ –î–æ–º–∞—à–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
                    await context.bot.delete_message(
                        chat_id=query.message.chat_id,
                        message_id=homework_message_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –í—ã–≤–æ–¥–∏–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
            inline_keyboard = [
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="next_lesson")],
                [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                [InlineKeyboardButton("–ì–∞–ª–µ—Ä–µ—è", callback_data="gallery")],
                [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard)

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
            next_lesson_time = await get_next_lesson_time(query.from_user.id)
            menu_text = f"üéâ –î–æ–º–∞—à–∫–∞ —Å–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω {next_lesson_time}."

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=menu_text,
                reply_markup=markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∏–∏ –î–ó: {e}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def handle_inline_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "next_lesson":
        await query.message.reply_text("üìò –í–æ—Ç –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫!")
    elif data == "profile":
        await query.message.reply_text("üë§ –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!")
    elif data == "gallery":
        await query.message.reply_text("üñºÔ∏è –í–æ—Ç –≤–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è!")
    elif data == "support":
        await query.message.reply_text("üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!")


async def get_next_lesson_time(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cursor.execute('''
            SELECT next_lesson_time, submission_time FROM users WHERE user_id = ?
        ''', (user_id,))
        result = cursor.fetchone()

        if result and result[0]:
            next_lesson_time_str = result[0]
            try:
                next_lesson_time = datetime.datetime.strptime(next_lesson_time_str, '%Y-%m-%d %H:%M:%S')
                return next_lesson_time.strftime('%Y-%m-%d %H:%M:%S')
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏: {e}, —Å—Ç—Ä–æ–∫–∞: {next_lesson_time_str}")
                return "–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ submission_time
            cursor.execute('''
                SELECT submission_time FROM homeworks 
                WHERE user_id = ? AND status = 'pending'
                ORDER BY submission_time DESC LIMIT 1
            ''', (user_id,))
            submission_result = cursor.fetchone()

            if submission_result and submission_result[0]:
                submission_time_str = submission_result[0]
                submission_time = datetime.datetime.strptime(submission_time_str, '%Y-%m-%d %H:%M:%S')
                next_lesson_time = submission_time + datetime.timedelta(hours=DEFAULT_LESSON_DELAY_HOURS)
                next_lesson_time_str = next_lesson_time.strftime('%Y-%m-%d %H:%M:%S')

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('''
                    UPDATE users SET next_lesson_time = ? WHERE user_id = ?
                ''', (next_lesson_time_str, user_id))
                conn.commit()

                return next_lesson_time_str
            else:
                return "–≤—Ä–µ–º—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞: {e}")
        return "–≤—Ä–µ–º—è –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

async def handle_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    await save_homework(update, context)

async def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    if update.message.document.mime_type.startswith('image/'):
        await save_homework(update, context)
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

async def approve_homework(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ '–ü—Ä–∏–Ω—è—Ç—å' –∏–ª–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()

    # –õ–æ–≥–∏—Ä—É–µ–º callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    callback_data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback_data}")

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback_data.split('|')
    if len(parts) != 3:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    action = parts[0]  # approve –∏–ª–∏ reject
    course_type = parts[1]  # main_course –∏–ª–∏ auxiliary_course
    try:
        hw_id = int(parts[2])  # ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, –ö—É—Ä—Å: {course_type}, ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {hw_id}")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ hw_id –∏–∑ callback_data: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ ID –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if action == "approve":
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –≤ –ë–î
            cursor.execute('''
                UPDATE homeworks
                SET status = 'approved',
                    approval_time = DATETIME('now')
                WHERE hw_id = ?
            ''', (hw_id,))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º user_id –∏ lesson
            cursor.execute('SELECT user_id, lesson FROM homeworks WHERE hw_id = ?', (hw_id,))
            user_id, lesson = cursor.fetchone()

            # –ü–æ–ª—É—á–∞–µ–º homework_message_id –∏–∑ context.user_data
            homework_message_id = context.user_data.get('homework_message_id')
            if homework_message_id:
                try:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
                    inline_keyboard = [
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="next_lesson")],
                        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
                        [InlineKeyboardButton("–ì–∞–ª–µ—Ä–µ—è", callback_data="gallery")],
                        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
                    ]
                    markup = InlineKeyboardMarkup(inline_keyboard)

                    next_lesson_time = await get_next_lesson_time(user_id)
                    await context.bot.edit_message_text(
                        chat_id=user_id,
                        message_id=homework_message_id,
                        text=f"üéâ –í–∞—à–∞ –¥–æ–º–∞—à–∫–∞ –ø–æ {lesson} —É—Ä–æ–∫—É –ø—Ä–∏–Ω—è—Ç–∞!\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω {next_lesson_time}.",
                        reply_markup=markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω homework_message_id –≤ context.user_data")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
            await context.bot.edit_message_reply_markup(
                chat_id=ADMIN_GROUP_ID,
                message_id=query.message.message_id,
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
            await context.bot.edit_message_caption(
                chat_id=ADMIN_GROUP_ID,
                message_id=query.message.message_id,
                caption=query.message.caption + "\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –î–ó –≤ –ë–î: {e}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    elif action == "reject":
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –≤ –ë–î
            cursor.execute('''
                UPDATE homeworks
                SET status = 'rejected'
                WHERE hw_id = ?
            ''', (hw_id,))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º user_id –∏ lesson
            cursor.execute('SELECT user_id, lesson FROM homeworks WHERE hw_id = ?', (hw_id,))
            user_id, lesson = cursor.fetchone()

            # –ü–æ–ª—É—á–∞–µ–º homework_message_id –∏–∑ context.user_data
            homework_message_id = context.user_data.get('homework_message_id')
            if homework_message_id:
                try:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
                    await context.bot.edit_message_text(
                        chat_id=user_id,
                        message_id=homework_message_id,
                        text=f"‚ùå –í–∞—à–∞ –¥–æ–º–∞—à–∫–∞ –ø–æ {lesson} —É—Ä–æ–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω homework_message_id –≤ context.user_data")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
            await context.bot.edit_message_reply_markup(
                chat_id=ADMIN_GROUP_ID,
                message_id=query.message.message_id,
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
            await context.bot.edit_message_caption(
                chat_id=ADMIN_GROUP_ID,
                message_id=query.message.message_id,
                caption=query.message.caption + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ!"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –î–ó –≤ –ë–î: {e}")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ callback_data: {action}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def get_user_courses(user_id):
    cursor.execute('SELECT main_course, auxiliary_course FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone()

def get_current_lesson(user_id, course_type):
    lesson_field = f"{course_type}_current_lesson"
    cursor.execute(f'SELECT {lesson_field} FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone()[0]

async def handle_code_words(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫.
    """
    user = update.effective_user
    text = update.message.text.strip().lower()
    logger.info(f"{user.id} - Entered code: {text}")

    if text in CODE_WORDS:
        course_type, course_name, tariff = CODE_WORDS[text]
        prefix = course_type.split('_')[0]

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if course_type == "main_course":
                cursor.execute(
                    """
                    UPDATE users 
                    SET main_course = ?, main_tariff = ?
                    WHERE user_id = ?
                    """,
                    (course_name, tariff, user.id),
                )
            elif course_type == "auxiliary_course":
                cursor.execute(
                    """
                    UPDATE users 
                    SET auxiliary_course = ?, auxiliary_tariff = ?
                    WHERE user_id = ?
                    """,
                    (course_name, tariff, user.id),
                )
            conn.commit()

            await update.message.reply_text(
                f"–ö—É—Ä—Å '{course_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–∞—Ä–∏—Ñ: {tariff}"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if course_type == "main_course":
                await send_lesson(update, context, "main_course")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–∫
            elif course_type == "auxiliary_course":
                await send_lesson(update, context, "auxiliary_course")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–∫
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return WAIT_FOR_CODE
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WAIT_FOR_CODE

async def request_support(update: Update, context: CallbackContext):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

async def get_lesson(update: Update, context: CallbackContext):
    user = update.effective_user
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—É—Ä—Å–∞
    if update.callback_query:
        query = update.callback_query
        course_type = query.data.split('_')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ callback_data
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start
        # TODO: –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫—É—Ä—Å –∫–∞–∫-—Ç–æ –∏–Ω–∞—á–µ
        course_type = 'main_course'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–∫
    await send_lesson(update, context, course_type)

async def show_gallery(update: Update, context: CallbackContext):
    await get_random_homework(update, context)

async def get_gallery_count():
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ –≥–∞–ª–µ—Ä–µ–µ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏).
    """
    cursor.execute('SELECT COUNT(*) FROM homeworks WHERE status = "approved"')
    return cursor.fetchone()[0]

async def get_random_homework(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
    cursor.execute('''
        SELECT hw_id, user_id, course_type, lesson, file_id 
        FROM homeworks 
        WHERE status = 'approved'
        ORDER BY RANDOM() 
        LIMIT 1
    ''')
    hw = cursor.fetchone()

    if not hw:
        # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        if query:
            await query.edit_message_text("–í –≥–∞–ª–µ—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç üòû\n–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º?")
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="–í –≥–∞–ª–µ—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç üòû\n–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º?"
            )
        await show_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        return

    hw_id, author_id, course_type, lesson, file_id = hw

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    cursor.execute('SELECT full_name FROM users WHERE user_id = ?', (author_id,))
    author_name = cursor.fetchone()[0] or "–ê–Ω–æ–Ω–∏–º"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìö –ö—É—Ä—Å: {course_type}\n"
    text += f"üìñ –£—Ä–æ–∫: {lesson}\n"
    text += f"üë©üé® –ê–≤—Ç–æ—Ä: {author_name}\n\n"
    text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    text += "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥—É—é —Ä–∞–±–æ—Ç—É - –Ω–∞–∂–º–∏—Ç–µ ¬´–°–ª–µ–¥—É—é—â–∞—è¬ª"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ ‚û°Ô∏è", callback_data='gallery_next')],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu_back')]
    ]

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if query:
            await context.bot.edit_message_media(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                media=InputMediaPhoto(media=file_id, caption=text),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=file_id,
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        try:
            if query:
                await context.bot.edit_message_media(
                    chat_id=query.message.chat_id,
                    message_id=query.message.message_id,
                    media=InputMediaDocument(media=file_id, caption=text),
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file_id,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É üòû",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

async def button_handler(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
    logger.info(
        f"{update.effective_user.id} - Current state: {await context.application.persistence.get_user(update.effective_user.id)}")

    query = update.callback_query
    data = query.data
    await query.answer()  # Always answer callback queries

    if data == 'gallery':
        await show_gallery(update, context)
    elif data == 'gallery_next':
        await get_random_homework(update, context)
    elif data == 'menu_back':
        await show_main_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if data == 'tariffs':
        await show_tariffs(update, context)
    elif data == 'send_hw':
        await request_homework(update, context)
    elif data == 'get_lesson':
        await get_lesson(update, context)
    elif data == 'gallery':
        await show_gallery(update, context)
    elif data == 'support':
        await request_support(update, context)
    elif data.startswith('admin'):
        data_split = data.split('_')
        if len(data_split) > 1:
            if data_split[1] == 'approve':
                await handle_admin_approval(update, context)
            elif data_split[1] == 'reject':
                await handle_admin_rejection(update, context)
    elif data.startswith('review'):
        await show_homework(update, context)
    elif data.startswith('repeat_lesson_'):
        lesson_number = int(data.split('_')[1])
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = update.effective_user.id
        cursor.execute('SELECT main_course, auxiliary_course FROM users WHERE user_id = ?', (user_id,))
        main_course, auxiliary_course = cursor.fetchone()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É—Ä—Å–∞
        course_type = 'main_course' if main_course else 'auxiliary_course'

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_lesson –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞
        await send_lesson(update, context, course_type)
        logger.info(f"–ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–∫ {user_id}")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ACTIVE
async def handle_active_state(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
    logger.info(
        f"{update.effective_user.id} - Current state: {await context.application.persistence.get_user(update.effective_user.id)}")

    user = update.effective_user
    text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º
    if text in CODE_WORDS:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        await handle_code_words(update, context)
    elif text == "/start":
        return await start(update, context)
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return ACTIVE
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
USER_INFO, = range(1)
HOMEWORK_RESPONSE, = range(1)

def main():

    application = ApplicationBuilder().token(TOKEN).persistence(persistence).build()

    # –û—Å–Ω–æ–≤–Ω–æ–π ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            USER_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_info)],
            WAIT_FOR_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code_words),
                CommandHandler("start", start)  # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            ],
            ACTIVE: [CallbackQueryHandler(button_handler)]
        },
        fallbacks=[CommandHandler("start", start)],
        persistent=True,  # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        name="my_conversation",
        allow_reentry=True
    )
    # –¢–û–õ–¨–ö–û –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–£–ñ–ï–ù
    application.add_handler(conv_handler)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(r"^(–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫|–ü—Ä–æ—Ñ–∏–ª—å|–ì–∞–ª–µ—Ä–µ—è|–ü–æ–¥–¥–µ—Ä–∂–∫–∞)$"),
                   handle_code_words))  # –ó–∞—Ç–µ–º –¥—Ä—É–≥–∏–µ


    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.IMAGE, handle_document))



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    application.add_handler(CallbackQueryHandler(send_preliminary_material, pattern='^preliminary_'))

    application.add_handler(CallbackQueryHandler(approve_homework, pattern=r'^(approve|reject)\|.+$'))
    application.add_handler(CallbackQueryHandler(self_approve_homework, pattern=r'^self_approve\|.+$'))
    application.add_handler(
        CallbackQueryHandler(handle_inline_buttons, pattern=r'^(next_lesson|profile|gallery|support)$'))

    application.job_queue.run_repeating(send_reminders, interval=60, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    application.add_handler(CommandHandler("reminders", reminders))
    application.add_handler(CommandHandler("set_morning", set_morning))
    application.add_handler(CommandHandler("set_evening", set_evening))
    application.add_handler(CommandHandler("disable_reminders", disable_reminders))
    application.add_handler(CommandHandler("stats", stats))

    application.run_polling()

if __name__ == '__main__':
    main()
