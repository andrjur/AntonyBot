import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, \
    CallbackQueryHandler
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))
TARGET_USER_ID = 954230772  # –í–∞—à user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.executescript('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    full_name TEXT,
    tariff TEXT,
    paid BOOLEAN DEFAULT 0,
    current_lesson INTEGER DEFAULT 0,
    homework_status TEXT DEFAULT 'none'
);

CREATE TABLE IF NOT EXISTS homeworks (
    hw_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    lesson INTEGER,
    file_id TEXT,
    status TEXT DEFAULT 'pending',
    feedback TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS admins (
    admin_id INTEGER PRIMARY KEY,
    level INTEGER DEFAULT 1
);
''')
conn.commit()

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    cursor.execute('INSERT OR IGNORE INTO users (user_id, full_name) VALUES (?, ?)',
                   (user.id, user.full_name))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursor.execute('''
        SELECT tariff, paid, current_lesson, homework_status 
        FROM users WHERE user_id = ?
    ''', (user.id,))
    data = cursor.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if data[1] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
    homework_status = {
        'none': "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
        'pending': "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
        'approved': "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ",
        'rejected': "‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    }.get(data[3], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!

üìö –í–∞—à –∫—É—Ä—Å: {data[0] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}
{status}
üìñ –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {data[2]}
üìù –°—Ç–∞—Ç—É—Å –î–ó: {homework_status}"""

    keyboard = [
        [InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='tariffs'),
         InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó", callback_data='send_hw')],
        [InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", callback_data='get_lesson'),
         InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", callback_data='gallery')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
         InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')]
    ]

    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_homework(update: Update, context: CallbackContext):
    user = update.effective_user
    photo = update.message.photo[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –ë–î
    cursor.execute('''
        INSERT INTO homeworks (user_id, lesson, file_id)
        VALUES (?, (SELECT current_lesson FROM users WHERE user_id = ?), ?)
    ''', (user.id, user.id, photo.file_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    await context.bot.send_message(
        chat_id=ADMIN_GROUP_ID,
        text=f"üì∏ –ù–æ–≤–æ–µ –î–ó –æ—Ç {user.full_name}\n–£—Ä–æ–∫: {cursor.lastrowid}\n",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"review_{user.id}")]])
    )

    await update.message.reply_text("üìå –í–∞—à–µ –î–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data == 'tariffs':
        await show_tariffs(update, context)
    elif data == 'send_hw':
        await request_homework(update, context)
    elif data == 'get_lesson':
        await get_lesson(update, context)
    elif data == 'gallery':
        await show_gallery(update, context)
    elif data == 'support':
        await request_support(update, context)
    elif data == 'admin_menu':
        await show_admin_menu(update, context)
    elif data.startswith('admin'):
        data_split = data.split('_')
        if len(data_split) > 1:
            if data_split[1] == 'approve':
                await handle_admin_approval(update, context)
            elif data_split[1] == 'reject':
                await handle_admin_rejection(update, context)
            elif data_split[0] == 'review':
                await show_homework(update, context)

async def handle_admin_approval(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = int(query.data.split('_')[2])

    cursor.execute('''
        UPDATE users 
        SET homework_status = 'approved', current_lesson = current_lesson + 1
        WHERE user_id = ?
    ''', (user_id,))
    conn.commit()

    await query.edit_message_text("‚úÖ –î–ó –æ–¥–æ–±—Ä–µ–Ω–æ!")
    await context.bot.send_message(user_id, "üéâ –í–∞—à–µ –î–ó –ø—Ä–∏–Ω—è—Ç–æ! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫.")

async def handle_admin_rejection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = int(query.data.split('_')[2])

    cursor.execute("UPDATE users SET homework_status = 'rejected' WHERE user_id = ?", (user_id,))
    conn.commit()

    await query.edit_message_text("‚ùå –î–ó –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
    await context.bot.send_message(user_id, "üìõ –í–∞—à–µ –î–ó —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞.")

async def show_homework(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = int(query.data.split('_')[1])

    cursor.execute('SELECT file_id FROM homeworks WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1', (user_id,))
    file_id = cursor.fetchone()[0]

    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=file_id,
        caption=f"–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_approve_{user_id}'),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{user_id}')]
        ])
    )

async def show_tariffs(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó", callback_data='tariff_no_check')],
        [InlineKeyboardButton("üìö –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –î–ó", callback_data='tariff_with_check')],
        [InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º (–ª–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä)", callback_data='tariff_premium')]
    ]
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def request_homework(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

async def get_lesson(update: Update, context: CallbackContext):
    user = update.effective_user
    cursor.execute('SELECT current_lesson FROM users WHERE user_id = ?', (user.id,))
    lesson = cursor.fetchone()[0] + 1  # –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    lesson_text = get_lesson_text(lesson)
    if lesson_text:
        await update.callback_query.message.reply_text(lesson_text)
    else:
        await update.callback_query.message.reply_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def show_gallery(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT hw_id, file_id FROM homeworks WHERE status = 'approved'")  # Only approved homeworks
    homeworks = cursor.fetchall()

    if not homeworks:
        await update.callback_query.message.reply_text("–í –≥–∞–ª–µ—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.")
        return

    keyboard = []
    row = []
    for hw_id, file_id in homeworks:
        row.append(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ {hw_id}", callback_data=f"gallery_image_{hw_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def display_gallery_image(update: Update, context: CallbackContext):
    query = update.callback_query
    hw_id = int(query.data.split('_')[2])

    cursor.execute("SELECT file_id, user_id, lesson FROM homeworks WHERE hw_id = ?", (hw_id,))
    result = cursor.fetchone()

    if result:
        file_id, user_id, lesson = result
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=file_id,
                caption=f"–†–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É—Ä–æ–∫ {lesson}"
            )
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    else:
        await query.message.reply_text("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def request_support(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text("–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

async def show_admin_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute('SELECT admin_id FROM admins WHERE admin_id = ?', (user_id,))
    admin = cursor.fetchone()

    if admin:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='admin_approve_payment')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_add'),
             InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_remove')],
        ]
        await update.callback_query.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

def get_lesson_text(lesson_number):
    try:
        with open(f'lessons/lesson{lesson_number}.txt', 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        return None

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_homework))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == '__main__':
    main()
