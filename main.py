import secrets
import string
import logging
import feedparser
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, \
    CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))
TARGET_USER_ID = 954230772  # –í–∞—à user_id
ADMIN_IDS = os.getenv("ADMIN_IDS").split(',')

CODE_WORDS = {
    "—Ä–æ–∑–∞": ("main_course", "femininity", "no_check"),  # –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥/–∑
    "—Ñ–∏–∞–ª–∫–∞": ("main_course", "femininity", "with_check"),  # –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥/–∑
    "–ª–µ–ø–µ—Å—Ç–æ–∫": ("main_course", "femininity", "premium"),  # –õ–∏—á–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
    "—Ç—ã–∫–≤–∞": ("auxiliary_course", "autogenic", "no_check"),
    "—Å–ª–∏–≤–∞": ("auxiliary_course", "autogenic", "with_check"),
    "–º–æ–ª–æ–∫–æ": ("auxiliary_course", "autogenic", "premium")
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('bot_db.sqlite', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
try:
    cursor.executescript('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        main_course TEXT,
        auxiliary_course TEXT,
        main_paid BOOLEAN DEFAULT 0,
        auxiliary_paid BOOLEAN DEFAULT 0,
        main_current_lesson INTEGER DEFAULT 0,
        auxiliary_current_lesson INTEGER DEFAULT 0,
        main_homework_status TEXT DEFAULT 'none',
        auxiliary_homework_status TEXT DEFAULT 'none',
        main_last_homework_time DATETIME,
        auxiliary_last_homework_time DATETIME,
        penalty_task TEXT,
        main_last_message_id INTEGER,
        auxiliary_last_message_id INTEGER
    );

    CREATE TABLE IF NOT EXISTS homeworks (
        hw_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        course_type TEXT,
        lesson INTEGER,
        file_id TEXT,
        message_id INTEGER,
        status TEXT DEFAULT 'pending',
        feedback TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    );

    CREATE TABLE IF NOT EXISTS admins (
        admin_id INTEGER PRIMARY KEY,
        level INTEGER DEFAULT 1
    );

    CREATE TABLE IF NOT EXISTS user_settings (
        user_id INTEGER PRIMARY KEY,
        morning_notification TIME,
        evening_notification TIME,
        show_example_homework BOOLEAN DEFAULT 1,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    );
    ''')
    conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
except sqlite3.Error as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

with conn:
    for admin_id in ADMIN_IDS:
        try:
            admin_id = int(admin_id)
            cursor.execute('INSERT OR IGNORE INTO admins (admin_id) VALUES (?)', (admin_id,))
            conn.commit()
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except ValueError:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")


def generate_admin_code(length=16):
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for i in range(length))

async def handle_admin_code(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    cursor.execute('SELECT admin_id FROM admins WHERE admin_id = ?', (user_id,))
    admin = cursor.fetchone()

    if admin:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º –∞–¥–º–∏–Ω–∞
        cursor.execute('SELECT code FROM admin_codes WHERE user_id = ? AND code = ?', (user_id, text))
        code = cursor.fetchone()

        if code:
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            cursor.execute('DELETE FROM admin_codes WHERE user_id = ? AND code = ?', (user_id, text))
            conn.commit()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await show_admin_menu(update, context)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥–æ–≤—ã–π –∞–¥–º–∏–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


async def handle_code_words(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    for code, details in CODE_WORDS.items():
        if code in text:
            course_type, course, tariff_type = details
            tariff_field = f"{course_type.split('_')[0]}_paid"
            cursor.execute(f'UPDATE users SET {course_type} = ?, {tariff_field} = 1 WHERE user_id = ?',
                           (course, user_id))
            conn.commit()
            await update.message.reply_text(
                f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{code}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—Å '{course}' ({course_type})")

            # –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
            if course_type == 'main_course':
                context.args = ['main']
            elif course_type == 'auxiliary_course':
                context.args = ['auxiliary']

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
            await get_lesson_after_code(update, context, course_type)

            return

    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.")


def get_average_homework_time(user_id):
    cursor.execute('''
        SELECT AVG((JULIANDAY(approval_time) - JULIANDAY(submission_time)) * 24 * 60 * 60)
        FROM homeworks
        WHERE user_id = ? AND status = 'approved'
    ''', (user_id,))
    result = cursor.fetchone()[0]
    if result:
        average_time_seconds = int(result)
        hours, remainder = divmod(average_time_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    else:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"


async def continue_course(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute(
        'SELECT main_course, auxiliary_course, main_current_lesson, auxiliary_current_lesson FROM users WHERE user_id = ?',
        (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    main_course, auxiliary_course, main_lesson, auxiliary_lesson = user_data

    if main_course:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –î–ó –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫—É—Ä—Å—É
        cursor.execute(
            'SELECT hw_id FROM homeworks WHERE user_id = ? AND course_type = ? AND status = ? ORDER BY timestamp DESC LIMIT 1',
            (user_id, 'main_course', 'pending'))
        pending_hw = cursor.fetchone()

        if pending_hw:
            await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            return True  # –ï—Å—Ç—å —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –î–ó, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        average_time = get_average_homework_time(user_id)
        cursor.execute('SELECT main_course, main_paid, main_current_lesson, main_homework_status FROM users WHERE user_id = ?', (user_id,))
        course_data = cursor.fetchone()
        main_course, main_paid, main_current_lesson, main_homework_status = course_data

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.full_name}!\n"
        text += f"–í–∞—à –∫—É—Ä—Å: {main_course}\n"
        text += f"–û–ø–ª–∞—á–µ–Ω: {'–î–∞' if main_paid else '–ù–µ—Ç'}\n"
        text += f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {main_current_lesson}\n"
        text += f"–°—Ç–∞—Ç—É—Å –î–ó: {main_homework_status}\n"
        text += f"–í—ã —Å–¥–∞–µ—Ç–µ –î–ó –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞: {average_time}\n\n"
        text += "–í–í–ï–î–ò–¢–ï –ö–û–î–û–í–û–ï –°–õ–û–í–û –ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='tariffs'),
             InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó", callback_data='send_hw')],
            [InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", callback_data='get_lesson_main'),
             InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", callback_data='gallery')],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
            InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", callback_data='random_joke')]
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return True


    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    if auxiliary_course:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –î–ó –ø–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É
        cursor.execute(
            'SELECT hw_id FROM homeworks WHERE user_id = ? AND course_type = ? AND status = ? ORDER BY timestamp DESC LIMIT 1',
            (user_id, 'auxiliary_course', 'pending'))
        pending_hw = cursor.fetchone()

        if pending_hw:
            await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            return True

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –î–ó, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
        keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å)",
                                          callback_data='get_lesson_auxiliary')]]
        await update.message.reply_text("–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –ø–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É?",
                                         reply_markup=InlineKeyboardMarkup(keyboard))
        return True

    return False  # –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å


async def get_lesson(update: Update, context: CallbackContext):
    user = update.effective_user

    if update.callback_query:
        query = update.callback_query
        course_type = query.data.split('_')[2]
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start
        course_type = 'main_course'  # –∏–ª–∏ 'auxiliary_course', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏


    await send_lesson(update, context, user, course_type)


async def get_lesson_after_code(update: Update, context: CallbackContext, course_type):
    user = update.effective_user

    # –ü–æ—Å—ã–ª–∞–µ–º —É—Ä–æ–∫
    await send_lesson(update, context, user, course_type)

async def send_lesson(update: Update, context: CallbackContext, user: Update.effective_user, course_type: str):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—É—Ä—Å–∞ –∏ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
    if course_type == 'main_course':
        course_field = 'main_course'
        lesson_field = 'main_current_lesson'
        last_message_field = 'main_last_message_id'  # –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id
    elif course_type == 'auxiliary_course':
        course_field = 'auxiliary_course'
        lesson_field = 'auxiliary_current_lesson'
        last_message_field = 'auxiliary_last_message_id'
    else:
        await context.bot.send_message(chat_id=user.id, text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫—É—Ä—Å–∞.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
    cursor.execute(f'SELECT {lesson_field}, {course_field}, {last_message_field} FROM users WHERE user_id = ?',
                   (user.id,))
    result = cursor.fetchone()
    if not result:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_lesson, course, last_message_id = result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    cursor.execute('SELECT MAX(timestamp) FROM homeworks WHERE user_id = ? AND course_type = ?',
                   (user.id, course_type))
    last_homework_time = cursor.fetchone()[0]
    if last_homework_time:
        last_homework_time = datetime.fromisoformat(last_homework_time)
        deadline = last_homework_time + timedelta(hours=72)
        if datetime.now() > deadline:
            # –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
            await update.message.reply_text(
                "–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return

    next_lesson = current_lesson + 1
    lesson_text = get_lesson_text(user.id, next_lesson, course_type)

    if lesson_text:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ "–ø—Ä–æ–π–¥–µ–Ω–æ" –Ω–∞ –º–µ—Å—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        if last_message_id:
            try:
                await context.bot.edit_message_media(
                    chat_id=user.id,
                    message_id=last_message_id,
                    media=InputMediaPhoto(media=open('passed.png', 'rb'))  # –ó–∞–º–µ–Ω–∏—Ç–µ 'passed.png' –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
        average_time = get_average_homework_time(user.id)
        text = f"{lesson_text}\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—ã —Å–¥–∞–µ—Ç–µ –î–ó –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ {average_time}."
        message = await context.bot.send_message(chat_id=user.id, text=text)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        cursor.execute(f'UPDATE users SET {lesson_field} = ?, {last_message_field} = ? WHERE user_id = ?', (next_lesson, message.message_id, user.id))
        conn.commit()

    else:
        await update.message.reply_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")



async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    cursor.execute('INSERT OR IGNORE INTO users (user_id, full_name) VALUES (?, ?)',
                   (user.id, user.full_name))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if not await continue_course(update, context):
        keyboard = [
            [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å - –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", callback_data='main_course_femininity')],
            [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å - –ê—É—Ç–æ–≥–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data='main_course_autogenic')],
            [InlineKeyboardButton("–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å - –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", callback_data='auxiliary_course_femininity')],
            [InlineKeyboardButton("–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å - –ê—É—Ç–æ–≥–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                                  callback_data='auxiliary_course_autogenic')],
        ]
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å—ã:",
                                         reply_markup=InlineKeyboardMarkup(keyboard))


async def course_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.effective_user.id
    course_type, course = query.data.split('_')[0], query.data.split('_')[1]

    cursor.execute(f'UPDATE users SET {course_type}_course = ? WHERE user_id = ?', (course, user_id))
    conn.commit()

    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {course_type} –∫—É—Ä—Å: {course}")


async def handle_homework(update: Update, context: CallbackContext):
    user = update.effective_user
    photo = update.message.photo[-1]
    course_type = 'main_course'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –î–ó –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫—É—Ä—Å—É

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º course_type –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT main_course, auxiliary_course FROM users WHERE user_id = ?', (user.id,))
    main_course, auxiliary_course = cursor.fetchone()

    if not main_course and auxiliary_course:
        course_type = 'auxiliary_course'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –ë–î
    lesson_field = 'main_current_lesson' if course_type == 'main_course' else 'auxiliary_current_lesson'
    cursor.execute(f'SELECT {lesson_field} FROM users WHERE user_id = ?', (user.id,))
    lesson = cursor.fetchone()[0]

    cursor.execute('''
        INSERT INTO homeworks (user_id, lesson, course_type, file_id, submission_time)
        VALUES (?, ?, ?, ?, ?)
        ''', (user.id, lesson, course_type, photo.file_id, datetime.now()))
    conn.commit()
    hw_id = cursor.lastrowid

    # –ü–æ–ª—É—á–∞–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    message_id = update.message.message_id

    # –û–±–Ω–æ–≤–ª—è–µ–º homeworks —Å message_id
    cursor.execute('UPDATE homeworks SET message_id = ? WHERE hw_id = ?', (message_id, hw_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    await context.bot.send_message(
        chat_id=ADMIN_GROUP_ID,
        text=f"üì∏ –ù–æ–≤–æ–µ –î–ó –æ—Ç {user.full_name}\n–£—Ä–æ–∫: {lesson} ({course_type})\n",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"review_{user.id}_{hw_id}")]])
    )

    await update.message.reply_text("üìå –í–∞—à–µ –î–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")


async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data == 'tariffs':
        await show_tariffs(update, context)
    elif data == 'send_hw':
        await request_homework(update, context)
    elif data == 'get_lesson_main':
        await get_lesson(update, context)
    elif data == 'get_lesson_auxiliary':
        await get_lesson(update, context)
    elif data == 'gallery':
        await show_gallery(update, context)
    elif data == 'support':
        await request_support(update, context)

    elif data.startswith('admin'):
        data_split = data.split('_')
        if len(data_split) > 1:
            if data_split[1] == 'approve':
                await handle_admin_approval(update, context)
            elif data_split[1] == 'reject':
                await handle_admin_rejection(update, context)
    elif data == 'random_joke':
        await random_joke(update, context)
    elif data.startswith('review'):
        await show_homework(update, context)


async def handle_admin_approval(update: Update, context: CallbackContext):
    query = update.callback_query
    data_parts = query.data.split('_')
    user_id = int(data_parts[2])
    hw_id = int(data_parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ
    cursor.execute('SELECT course_type FROM homeworks WHERE hw_id = ?', (hw_id,))
    course_type = cursor.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    if course_type == 'main_course':
        lesson_field = 'main_current_lesson'
        homework_status_field = 'main_homework_status'
    else:
        lesson_field = 'auxiliary_current_lesson'
        homework_status_field = 'auxiliary_homework_status'

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
    cursor.execute(f'''
        UPDATE users 
        SET {homework_status_field} = 'approved', {lesson_field} = {lesson_field} + 1
        WHERE user_id = ?
    ''', (user_id,))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –≤ —Ç–∞–±–ª–∏—Ü–µ homeworks
    cursor.execute('UPDATE homeworks SET status = "approved", approval_time = ? WHERE hw_id = ?', (datetime.now(), hw_id,))
    conn.commit()

    await query.edit_message_caption(caption="‚úÖ –î–ó –æ–¥–æ–±—Ä–µ–Ω–æ!")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='tariffs'),
         InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó", callback_data='send_hw')],
        [InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫", callback_data='get_lesson_main'),
         InlineKeyboardButton("üë• –ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç", callback_data='gallery')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
         InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–º–µ–Ω—é", callback_data='admin_menu')],
        [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", callback_data='random_joke')]
    ]
    await context.bot.send_message(
        chat_id=user_id,
        text="üéâ –°–ø–∞—Å–∏–±–æ, –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!",
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Ä–∞–±–æ—Ç –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É
    await show_gallery_for_lesson(update, context)

async def show_gallery_for_lesson(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
    cursor.execute('SELECT main_current_lesson FROM users WHERE user_id = ?', (user_id,))
    current_lesson = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É
    cursor.execute("SELECT hw_id, file_id FROM homeworks WHERE status = 'approved' AND lesson = ?", (current_lesson,))
    homeworks = cursor.fetchall()

    if not homeworks:
        await update.callback_query.message.reply_text("–í –≥–∞–ª–µ—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.")
        return

    keyboard = []
    row = []
    for hw_id, file_id in homeworks:
        row.append(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ {hw_id}", callback_data=f"gallery_image_{hw_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await context.bot.send_message(
        chat_id=user_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_admin_rejection(update: Update, context: CallbackContext):
    query = update.callback_query
    data_parts = query.data.split('_')
    user_id = int(data_parts[2])
    hw_id = int(data_parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ
    cursor.execute('SELECT course_type FROM homeworks WHERE hw_id = ?', (hw_id,))
    course_type = cursor.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –î–ó –≤ —Ç–∞–±–ª–∏—Ü–µ users
    if course_type == 'main_course':
        homework_status_field = 'main_homework_status'
    else:
        homework_status_field = 'auxiliary_homework_status'

    cursor.execute(f"UPDATE users SET {homework_status_field} = 'rejected' WHERE user_id = ?", (user_id,))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –î–ó –≤ —Ç–∞–±–ª–∏—Ü–µ homeworks
    cursor.execute('UPDATE homeworks SET status = "rejected" WHERE hw_id = ?', (hw_id,))
    conn.commit()

    await query.edit_message_caption(caption="‚ùå –î–ó –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
    await context.bot.send_message(user_id, "üìõ –í–∞—à–µ –î–ó —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞.")


async def show_homework(update: Update, context: CallbackContext):
    query = update.callback_query
    data_parts = query.data.split('_')
    user_id = int(data_parts[1])
    hw_id = int(data_parts[2])

    cursor.execute('SELECT file_id FROM homeworks WHERE hw_id = ?', (hw_id,))
    file_id = cursor.fetchone()[0]

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_approve_{user_id}_{hw_id}'),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{user_id}_{hw_id}')]
    ])

    try:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=file_id,
            caption=f"–î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É.")


async def show_tariffs(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–ó", callback_data='tariff_no_check')],
        [InlineKeyboardButton("üìö –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –î–ó", callback_data='tariff_with_check')],
        [InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º (–ª–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä)", callback_data='tariff_premium')]
    ]
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))


async def request_homework(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")


def get_lesson_text(user_id, lesson_number, course_type):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫—É—Ä—Å–∞
    if course_type == 'main_course':
        cursor.execute('SELECT main_course FROM users WHERE user_id = ?', (user_id,))
    else:
        cursor.execute('SELECT auxiliary_course FROM users WHERE user_id = ?', (user_id,))
    course = cursor.fetchone()[0]

    try:
        with open(f'courses/{course}/lesson{lesson_number}.txt', 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: 'courses/{course}/lesson{lesson_number}.txt'")
        return None


async def show_gallery(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT hw_id, file_id FROM homeworks WHERE status = 'approved'")  # Only approved homeworks
    homeworks = cursor.fetchall()

    if not homeworks:
        await update.callback_query.message.reply_text("–í –≥–∞–ª–µ—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.")
        return

    keyboard = []
    row = []
    for hw_id, file_id in homeworks:
        row.append(InlineKeyboardButton(f"–†–∞–±–æ—Ç–∞ {hw_id}", callback_data=f"gallery_image_{hw_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))


async def display_gallery_image(update: Update, context: CallbackContext):
    query = update.callback_query
    hw_id = int(query.data.split('_')[2])

    cursor.execute("SELECT file_id, user_id, lesson FROM homeworks WHERE hw_id = ?", (hw_id,))
    result = cursor.fetchone()

    if result:
        file_id, user_id, lesson = result
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=file_id,
                caption=f"–†–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É—Ä–æ–∫ {lesson}"
            )
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    else:
        await query.message.reply_text("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


async def random_joke(update: Update, context: CallbackContext):
    rss_urls = [
        "https://www.anekdot.ru/rss/random.rss",
        "https://anekdotov-mnogo.ru/anekdoty_rss.xml",
        "http://www.anekdot.ru/rss/anekdot.rss",
        "http://www.anekdot.ru/rss/besty.rss",
        "http://www.umori.li/api/rss/56d9c03b61c4046c5e99a6b1"
    ]

    jokes = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤

    if update.callback_query:
        query = update.callback_query
        for i in range(2):  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–≤–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
            try:
                rss_url = random.choice(rss_urls)
                feed = feedparser.parse(rss_url)
                if feed.entries:
                    random_entry = random.choice(feed.entries)
                    joke = random_entry.title + "\n\n" + random_entry.description
                    jokes.append(joke)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")

        if jokes:
            for joke in jokes:
                await query.message.reply_text(joke)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        else:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã.")
    else:
        for i in range(2):  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–≤–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
            try:
                rss_url = random.choice(rss_urls)
                feed = feedparser.parse(rss_url)
                if feed.entries:
                    random_entry = random.choice(feed.entries)
                    joke = random_entry.title + "\n\n" + random_entry.description
                    jokes.append(joke)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")

        if jokes:
            for joke in jokes:
                await update.message.reply_text(joke)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–Ω–µ–∫–¥–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã.")




async def request_support(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text("–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


async def show_admin_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute('SELECT admin_id FROM admins WHERE admin_id = ?', (user_id,))
    admin = cursor.fetchone()

    if admin:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='admin_approve_payment')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_add'),
             InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='admin_remove')],
        ]
        await update.callback_query.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code_words))
    app.add_handler(CallbackQueryHandler(course_selection, pattern='^.+_course_.*'))  # –í—Å–µ –≤–∏–¥—ã –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    app.add_handler(MessageHandler(filters.PHOTO, handle_homework))
    app.add_handler(CallbackQueryHandler(button_handler, pattern='^((?!course).)*$'))  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_code))

    app.run_polling()


if __name__ == '__main__':
    main()
