
### 1. **Магазин курсов**
- **Реализация магазина**:
  - Бот поддерживает возможность выбора и покупки курсов через тарифы.
  - Каждый курс имеет несколько тарифов: "Без проверки д/з", "С проверкой д/з" и "Личное сопровождение".
  - После оплаты курс активируется для пользователя, и он начинает получать уроки.

- **Техническая реализация**:
  - Тарифы загружаются из файла `tariffs.json`, что позволяет легко добавлять или изменять курсы и их параметры.
  - При активации курса через кодовое слово (например, `роза`, `фиалка`, `лепесток`) происходит проверка, существует ли уже такой курс у пользователя. Если да, то пользователь может обновить свой тариф.

---

### 2. **Поддержка нескольких курсов**
- **Возможность проходить несколько курсов**:
  - Пользователь может активировать несколько курсов одновременно.
  - Каждый курс хранится в базе данных с уникальным идентификатором (`course_id`).

- **Техническая реализация**:
  - В таблице `user_courses` хранится информация о курсах каждого пользователя, включая прогресс (`progress`) и тариф (`tariff`).
  - Активный курс пользователя хранится в таблице `users` в поле `active_course_id`. Это позволяет переключаться между курсами.

---

### 3. **Вспомогательный режим курса**
- **После завершения курса**:
  - Курс остаётся доступным для пользователя во вспомогательном режиме.
  - Пользователь может повторно просматривать материалы курса, даже если он завершил его.

- **Техническая реализация**:
  - Прогресс курса (`progress`) не сбрасывается после завершения.
  - Уроки и файлы курса остаются доступными для пользователя через команду `/lessons`.

---

### 4. **Гибкая система отправки материалов**
- **Задержки перед отправкой файлов**:
  - Поддерживаются задержки перед отправкой файлов (например, `_5m`, `_2h` в имени файла).
  - Это позволяет создавать более плавный и удобный процесс обучения.

- **Техническая реализация**:
  - Используется регулярное выражение для извлечения времени задержки из имени файла:
    ```python
    DELAY_PATTERN = re.compile(r"_(\d+)([mh])$")
    ```
  - Задержка преобразуется в секунды и применяется с помощью `await asyncio.sleep(delay)`.

---

### 5. **Предварительные материалы**
- **Предварительные материалы для следующего урока**:
  - После сдачи домашнего задания пользователь может получить доступ к предварительным материалам для следующего урока.

- **Техническая реализация**:
  - Файлы с префиксом `_p` (например, `lesson2_p4.mp4`) считаются предварительными.
  - Эти файлы отправляются по кнопке после сдачи домашнего задания.

---

### 6. **Система домашних заданий**
- **Проверка домашних заданий**:
  - Для тарифа "С проверкой д/з" домашние задания отправляются администратору.
  - Для тарифа "Без проверки д/з" предусмотрена кнопка самопроверки.

- **Техническая реализация**:
  - Домашние задания хранятся в базе данных с указанием статуса (`pending`, `approved`).
  - Администратор может просмотреть список домашних заданий и их статус.

---

### 7. **Галерея домашних заданий**
- **Возможность просмотра выполненных домашних заданий**:
  - Пользователи могут просматривать выполненные домашние задания других участников.

- **Техническая реализация**:
  - Галерея формируется на основе данных из базы данных.
  - Домашние задания отображаются в виде списка с указанием автора и статуса.

---

### 8. **Напоминания**
- **Утренние и вечерние напоминания**:
  - Бот отправляет напоминания о курсе:
    - Утром: "Доброе утро! Не забудьте посмотреть материалы курса."
    - Вечером: "Добрый вечер! Не забудьте выполнить домашнее задание."

- **Техническая реализация**:
  - Используется планировщик задач (`apscheduler`) для отправки напоминаний в установленное время.

---

### 9. **Статистика**
- **Статистика для администратора**:
  - Администратор может просмотреть статистику:
    - Количество пользователей.
    - Количество активных курсов.
    - Среднее время проверки домашних заданий.

- **Техническая реализация**:
  - Статистика собирается из базы данных и отображается в виде текстового сообщения.

---

### 10. **Поддержка HTML-файлов**
- **Форматированный текст урока**:
  - Поддерживаются `.html` файлы для текста урока.
  - Это позволяет использовать форматирование (жирный шрифт, ссылки, списки и т.д.).

- **Техническая реализация**:
  - Текст урока отправляется с параметром `parse_mode="HTML"`:
    ```python
    await context.bot.send_message(chat_id=user_id, text=lesson_text, parse_mode="HTML")
    ```

---

### 11. **Управление курсом**
- **Кнопки управления курсом**:
  - Пользователь может:
    - Сменить тариф.
    - Просмотреть список активных курсов.
    - Посмотреть историю домашних заданий.

- **Техническая реализация**:
  - Динамическое создание кнопок для управления курсом:
    ```python
    keyboard = [
        [InlineKeyboardButton("Сменить $$$ тариф", callback_data="change_tariff")],
        [InlineKeyboardButton("Мои курсы", callback_data="my_courses")],
        [InlineKeyboardButton("История ДЗ", callback_data="hw_history")]
    ]
    ```

---

### 12. **Личная консультация**
- **Запись на личную консультацию**:
  - Для тарифа "Личное сопровождение" доступна возможность записи на личную консультацию.

- **Техническая реализация**:
  - Пользователь выбирает удобное время для консультации через кнопки или текстовое сообщение.

